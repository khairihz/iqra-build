(function () { const t = document.createElement("link").relList; if (t && t.supports && t.supports("modulepreload")) return; for (const e of document.querySelectorAll('link[rel="modulepreload"]')) s(e); new MutationObserver(e => { for (const o of e) if (o.type === "childList") for (const c of o.addedNodes) c.tagName === "LINK" && c.rel === "modulepreload" && s(c) }).observe(document, { childList: !0, subtree: !0 }); function r(e) { const o = {}; return e.integrity && (o.integrity = e.integrity), e.referrerPolicy && (o.referrerPolicy = e.referrerPolicy), e.crossOrigin === "use-credentials" ? o.credentials = "include" : e.crossOrigin === "anonymous" ? o.credentials = "omit" : o.credentials = "same-origin", o } function s(e) { if (e.ep) return; e.ep = !0; const o = r(e); fetch(e.href, o) } })(); document.addEventListener("DOMContentLoaded", function () { const n = document.querySelector(".progress-bar"), t = new IntersectionObserver(r => { r.forEach(s => { s.isIntersecting && (n.classList.add("animate-progress"), t.unobserve(n)) }) }, { threshold: .5 }); t.observe(n) }); document.addEventListener("DOMContentLoaded", function () { const n = document.querySelectorAll(".hidden-opacity"), t = new IntersectionObserver(r => { r.forEach(s => { s.isIntersecting && s.target.classList.add("visible-opacity") }) }, { threshold: .2 }); n.forEach(r => t.observe(r)) }); document.addEventListener("DOMContentLoaded", function () { const n = document.querySelector("nav .lg\\:hidden button"), t = document.querySelector("header > div[role='dialog']"), r = t.querySelector("button"); n.addEventListener("click", function () { t.classList.toggle("hidden") }), r.addEventListener("click", function () { t.classList.add("hidden") }) });
